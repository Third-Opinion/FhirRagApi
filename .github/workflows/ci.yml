name: CI - Build and Test Web API

on:
  push:
    branches: [ main, develop, 'feature/**', 'hotfix/**' ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '9.0.x'
  SOLUTION_PATH: 'FhirRagApi.sln'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-api-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-api-
          ${{ runner.os }}-nuget-

    - name: Add GitHub NuGet source
      run: |
        dotnet nuget list source | grep -q "github-third-opinion" && dotnet nuget remove source github-third-opinion || true
        dotnet nuget add source https://nuget.pkg.github.com/Third-Opinion/index.json \
          --name github-third-opinion \
          --username ${{ github.actor }} \
          --password ${{ secrets.GITHUB_TOKEN }} \
          --store-password-in-clear-text

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore

    - name: Run tests
      run: dotnet test ${{ env.SOLUTION_PATH }} --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

    - name: Publish Web API
      run: |
        echo "üì¶ Publishing Web API..."
        dotnet publish FhirRag.Api.WebApi/FhirRag.Api.WebApi.csproj \
          --configuration Release \
          --no-build \
          --output ./publish

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: ./coverage/**/*.xml

    - name: Upload published app
      uses: actions/upload-artifact@v4
      with:
        name: published-app
        path: ./publish/**

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          **/bin/Release/**
          !**/bin/Release/**/*.pdb

  api-integration-tests:
    name: API Integration Tests
    runs-on: ubuntu-latest
    needs: build-and-test
    
    services:
      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
        env:
          SERVICES: s3,dynamodb,opensearch
          DEBUG: 1
        options: >-
          --health-cmd="curl -f http://localhost:4566/_localstack/health"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Add GitHub NuGet source
      run: |
        dotnet nuget list source | grep -q "github-third-opinion" && dotnet nuget remove source github-third-opinion || true
        dotnet nuget add source https://nuget.pkg.github.com/Third-Opinion/index.json \
          --name github-third-opinion \
          --username ${{ github.actor }} \
          --password ${{ secrets.GITHUB_TOKEN }} \
          --store-password-in-clear-text

    - name: Download published app
      uses: actions/download-artifact@v4
      with:
        name: published-app
        path: ./publish

    - name: Wait for LocalStack
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:4566/_localstack/health; do sleep 2; done'

    - name: Run API integration tests
      env:
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
        AWS_DEFAULT_REGION: us-east-1
        AWS_ENDPOINT_URL: http://localhost:4566
        ASPNETCORE_ENVIRONMENT: Testing
      run: |
        # Start the API in background
        cd publish
        dotnet FhirRag.Api.WebApi.dll &
        API_PID=$!
        
        # Wait for API to start
        sleep 10
        
        # Run API tests
        curl -f http://localhost:5000/health || echo "Health check endpoint not available"
        
        # Stop the API
        kill $API_PID || true

    - name: Run API tests
      env:
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
        AWS_DEFAULT_REGION: us-east-1
        AWS_ENDPOINT_URL: http://localhost:4566
      run: |
        # Run integration tests
        dotnet test ${{ env.SOLUTION_PATH }} \
          --configuration Release \
          --filter "Category=ApiIntegration" \
          --verbosity normal || echo "No API integration tests found"

  security-and-performance:
    name: Security and Performance
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Add GitHub NuGet source
      run: |
        dotnet nuget list source | grep -q "github-third-opinion" && dotnet nuget remove source github-third-opinion || true
        dotnet nuget add source https://nuget.pkg.github.com/Third-Opinion/index.json \
          --name github-third-opinion \
          --username ${{ github.actor }} \
          --password ${{ secrets.GITHUB_TOKEN }} \
          --store-password-in-clear-text

    - name: Download published app
      uses: actions/download-artifact@v4
      with:
        name: published-app
        path: ./publish

    - name: Security scan
      run: |
        # Check for vulnerable packages
        dotnet list ${{ env.SOLUTION_PATH }} package --vulnerable --include-transitive || echo "No vulnerabilities found"
        
        # Scan published files
        echo "üîç Scanning published files for secrets..."
        grep -r "password\|secret\|key" ./publish/ --exclude-dir=wwwroot || echo "No secrets found in published files"

    - name: Performance baseline
      run: |
        echo "üìä Checking published app size..."
        du -sh ./publish
        
        echo "üìã Key files:"
        ls -lh ./publish/*.dll | head -10

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Add GitHub NuGet source
      run: |
        dotnet nuget list source | grep -q "github-third-opinion" && dotnet nuget remove source github-third-opinion || true
        dotnet nuget add source https://nuget.pkg.github.com/Third-Opinion/index.json \
          --name github-third-opinion \
          --username ${{ github.actor }} \
          --password ${{ secrets.GITHUB_TOKEN }} \
          --store-password-in-clear-text

    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}

    - name: Check code formatting
      run: |
        dotnet format --verify-no-changes --severity error ${{ env.SOLUTION_PATH }} || {
          echo "‚ùå Code formatting issues found. Please run 'dotnet format' to fix."
          exit 1
        }

    - name: Run static analysis
      run: |
        dotnet build ${{ env.SOLUTION_PATH }} \
          --configuration Release \
          -p:TreatWarningsAsErrors=true \
          -p:WarningsAsErrors= \
          -p:RunAnalyzersDuringBuild=true